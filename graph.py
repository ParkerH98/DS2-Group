# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mbARSz2VBrjnZwZmz3USiOufTdJLiPij
"""
import sys

with open(sys.argv[3]) as f:
    lines = f.readlines()

for x in lines:
  quicksort_times=x.split(',')

for i in range(0,len(quicksort_times)):
  quicksort_times[i]=int(float(quicksort_times[i]))

with open(sys.argv[4]) as f:
  lines1=f.readlines()

for y in lines1:
  radixsort_times=y.split(',')

for j in range(0,len(radixsort_times)):
  radixsort_times[j]=int(float(radixsort_times[j]))

print(quicksort_times)

print(radixsort_times)

total_records=int(sys.argv[1])
total_datapoints=int(sys.argv[2])

x_axis=[]
for j in range(1,total_datapoints+1):
  x_axis.append(j*int((total_records/total_datapoints)))


import matplotlib.pyplot as plt
import numpy as np

plt.plot(x_axis,quicksort_times)
plt.xlabel("No-of records")
plt.ylabel("Assymptotic average run times")
plt.title("Assymptotic quicksort timecomplexity analysis")
plt.savefig('quicksort.png')
fig = plt.figure()
plt.figure().clear()
plt.close()
plt.cla()
plt.clf()

plt.plot(x_axis,radixsort_times)
plt.xlabel("No-of records")
plt.ylabel("Assymptotic average run times")
plt.title("Assymptotic radixsort timecomplexity analysis")
plt.savefig('radixsort.png')

check = open('check.txt', 'a')
check.write("success..!");
check.close()
